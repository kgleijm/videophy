// iterative cell calculated on stepcount
int potentialX = stepCount % mazeWidth;
int potentialY = (int) Math.Floor((double) stepCount / mazeWidth);

// get cell bound to coordinates
currentCell = getCellAt(potentialX, potentialY);
jump(potentialX, potentialY);

// 50/50 chance of going down or right
Direction direction = (random.NextDouble() > 0.5) ? Direction.DOWN : Direction.RIGHT;
Direction otherDirection = (direction == Direction.DOWN) ? Direction.RIGHT : Direction.DOWN;

// implement binary tree maze logic
if (canGo(direction))
{
    link(direction);
}
else if (canGo(otherDirection))
{
    link(otherDirection);
}
else
{
    Console.Out.WriteLine("no more cells left");
    return false;
}